/**
* (c) 2009-2018 Highsoft AS
*
* License: www.highcharts.com/license
* For commercial usage, a valid license is required. To purchase a license for Highcharts Android, please see our website: https://shop.highsoft.com/
* In case of questions, please contact sales@highsoft.com
*/

package com.highsoft.highcharts.common.hichartsclasses;

import java.util.HashMap;
import java.util.HashMap;
import java.util.ArrayList;
import com.highsoft.highcharts.core.HIFunction;
import com.highsoft.highcharts.core.HIFoundation;



public class HIGeoJSONTranslation extends HIFoundation { 

	private String crs;
	/**
 The coordinate reference system used to generate this portion of the map. 
	*/
	public void setCrs(String crs) {
		this.crs = crs;
		this.setChanged();
		this.notifyObservers();
	}

	public String getCrs(){ return crs; }

	private HashMap hitZone;
	/**
 Define the portion of the map that this defintion applies to. Defined as a GeoJSON polygon feature object, with `type` and `coordinates` properties. 
	*/
	public void setHitZone(HashMap hitZone) {
		this.hitZone = hitZone;
		this.setChanged();
		this.notifyObservers();
	}

	public HashMap getHitZone(){ return hitZone; }

	private Number jsonmarginX;
	/**
 Property for internal use for maps generated by Highsoft. 
	*/
	public void setJsonmarginX(Number jsonmarginX) {
		this.jsonmarginX = jsonmarginX;
		this.setChanged();
		this.notifyObservers();
	}

	public Number getJsonmarginX(){ return jsonmarginX; }

	private Number jsonmarginY;
	/**
 Property for internal use for maps generated by Highsoft. 
	*/
	public void setJsonmarginY(Number jsonmarginY) {
		this.jsonmarginY = jsonmarginY;
		this.setChanged();
		this.notifyObservers();
	}

	public Number getJsonmarginY(){ return jsonmarginY; }

	private Number jsonres;
	/**
 Property for internal use for maps generated by Highsoft. 
	*/
	public void setJsonres(Number jsonres) {
		this.jsonres = jsonres;
		this.setChanged();
		this.notifyObservers();
	}

	public Number getJsonres(){ return jsonres; }

	private Number rotation;
	/**
 Specifies clockwise rotation of the coordinates after the projection, but before scaling and panning. Defined in radians, relative to the coordinate system origin. 
	*/
	public void setRotation(Number rotation) {
		this.rotation = rotation;
		this.setChanged();
		this.notifyObservers();
	}

	public Number getRotation(){ return rotation; }

	private Number scale;
	/**
 The scaling factor applied to the projected coordinates. 
	*/
	public void setScale(Number scale) {
		this.scale = scale;
		this.setChanged();
		this.notifyObservers();
	}

	public Number getScale(){ return scale; }

	private Number xoffset;
	/**
 Property for internal use for maps generated by Highsoft. 
	*/
	public void setXoffset(Number xoffset) {
		this.xoffset = xoffset;
		this.setChanged();
		this.notifyObservers();
	}

	public Number getXoffset(){ return xoffset; }

	private Number xpan;
	/**
 X offset of projected coordinates after scaling. 
	*/
	public void setXpan(Number xpan) {
		this.xpan = xpan;
		this.setChanged();
		this.notifyObservers();
	}

	public Number getXpan(){ return xpan; }

	private Number yoffset;
	/**
 Property for internal use for maps generated by Highsoft. 
	*/
	public void setYoffset(Number yoffset) {
		this.yoffset = yoffset;
		this.setChanged();
		this.notifyObservers();
	}

	public Number getYoffset(){ return yoffset; }

	private Number ypan;
	/**
 Y offset of projected coordinates after scaling. 
	*/
	public void setYpan(Number ypan) {
		this.ypan = ypan;
		this.setChanged();
		this.notifyObservers();
	}

	public Number getYpan(){ return ypan; }



	public HIGeoJSONTranslation() {

	}

	@Override
public HashMap<String, Object> getParams() {

		HashMap<String, Object> params = new HashMap<>();
		params.put("_wrapperID", this.uuid);
		if (this.crs != null) {
			params.put("crs", this.crs);
		}
		if (this.hitZone != null) {
			params.put("hitZone", this.hitZone);
		}
		if (this.jsonmarginX != null) {
			params.put("jsonmarginX", this.jsonmarginX);
		}
		if (this.jsonmarginY != null) {
			params.put("jsonmarginY", this.jsonmarginY);
		}
		if (this.jsonres != null) {
			params.put("jsonres", this.jsonres);
		}
		if (this.rotation != null) {
			params.put("rotation", this.rotation);
		}
		if (this.scale != null) {
			params.put("scale", this.scale);
		}
		if (this.xoffset != null) {
			params.put("xoffset", this.xoffset);
		}
		if (this.xpan != null) {
			params.put("xpan", this.xpan);
		}
		if (this.yoffset != null) {
			params.put("yoffset", this.yoffset);
		}
		if (this.ypan != null) {
			params.put("ypan", this.ypan);
		}
		return params;
	}

}