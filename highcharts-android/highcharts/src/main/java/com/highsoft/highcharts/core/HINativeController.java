package com.highsoft.highcharts.core;

import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class HINativeController {

    private final static String TAG = "HINativeController";

    static String getMethodString(Map<String, Object> map) {

        String[] args = new String[] {null, null, null, null, null};
        List<Object> params;
        HISerializer serializer = new HISerializer(new HIFunctionHandler());

        if(map.get("params") != null && map.get("params") instanceof List) {
            params = new ArrayList<>((Collection<?>) map.get("params"));
            for(int i = 0; i<params.size(); i++){
                if(params.get(i) instanceof Map || params.get(i) instanceof List){
                    args[i] = serializer.JSObject(params.get(i));
                    Log.e(TAG, "" + args[i]);
                } else {
                    args[i] = params.get(i).toString();
                    Log.e(TAG, "" + args[i]);
                }
            }
        } else {
//            Log.e(TAG, "No params!");
        }

        HashMap<String, HashMap<String, String>> functions = new HashMap<String, HashMap<String, String>>(){{
            put("Annotation", new HashMap<String, String>(){{
                put("adjustVisibility", String.format("(function adjustVisibility(wrapperID, item) { chart.annotations.forEach(function(currentAnnotations) { if (currentAnnotations.options._wrapperID === wrapperID) { currentAnnotations.adjustVisibility(item); return; } }); })(\"%s\", %s);", map.get("id"), args[0]));
                put("destroy", String.format("(function destroy(wrapperID) { chart.annotations.forEach(function(currentAnnotations) { if (currentAnnotations.options._wrapperID === wrapperID) { currentAnnotations.destroy(); return; } }); })(\"%s\");", map.get("id")));
                put("destroyItem", String.format("(function destroyItem(wrapperID, item) { chart.annotations.forEach(function(currentAnnotations) { if (currentAnnotations.options._wrapperID === wrapperID) { currentAnnotations.destroyItem(item); return; } }); })(\"%s\", %s);", map.get("id"), args[0]));
                put("initLabel", String.format("(function initLabel(wrapperID, item) { chart.annotations.forEach(function(currentAnnotations) { if (currentAnnotations.options._wrapperID === wrapperID) { currentAnnotations.initLabel(item); return; } }); })(\"%s\", %s);", map.get("id"), args[0]));
                put("initShape", String.format("(function initShape(wrapperID, item) { chart.annotations.forEach(function(currentAnnotations) { if (currentAnnotations.options._wrapperID === wrapperID) { currentAnnotations.initShape(item); return; } }); })(\"%s\", %s);", map.get("id"), args[0]));
                put("redrawItem0", String.format("(function redrawItem(wrapperID, item) { chart.annotations.forEach(function(currentAnnotations) { if (currentAnnotations.options._wrapperID === wrapperID) { currentAnnotations.redrawItem(item); return; } }); })(\"%s\", %s);", map.get("id"), args[0]));
                put("redrawItem1", String.format("(function redrawItem(wrapperID, item, animation) { chart.annotations.forEach(function(currentAnnotations) { if (currentAnnotations.options._wrapperID === wrapperID) { currentAnnotations.redrawItem(item, animation); return; } }); })(\"%s\", %s, %s);", map.get("id"), args[0], args[1]));
                put("redrawItems0", String.format("(function redrawItems(wrapperID, items) { chart.annotations.forEach(function(currentAnnotations) { if (currentAnnotations.options._wrapperID === wrapperID) { currentAnnotations.redrawItems(items); return; } }); })(\"%s\", %s);", map.get("id"), args[0]));
                put("redrawItems1", String.format("(function redrawItems(wrapperID, items, animation) { chart.annotations.forEach(function(currentAnnotations) { if (currentAnnotations.options._wrapperID === wrapperID) { currentAnnotations.redrawItems(items, animation); return; } }); })(\"%s\", %s, %s);", map.get("id"), args[0], args[1]));
                put("remove", String.format("(function remove(wrapperID) { chart.annotations.forEach(function(currentAnnotations) { if (currentAnnotations.options._wrapperID === wrapperID) { currentAnnotations.remove(); return; } }); })(\"%s\");", map.get("id")));
                put("setOptions", String.format("(function setOptions(wrapperID) { chart.annotations.forEach(function(currentAnnotations) { if (currentAnnotations.options._wrapperID === wrapperID) { currentAnnotations.setOptions(); return; } }); })(\"%s\");", map.get("id")));
                put("setVisibility0", String.format("(function setVisibility(wrapperID) { chart.annotations.forEach(function(currentAnnotations) { if (currentAnnotations.options._wrapperID === wrapperID) { currentAnnotations.setVisibility(); return; } }); })(\"%s\");", map.get("id")));
                put("setVisibility1", String.format("(function setVisibility(wrapperID, visible) { chart.annotations.forEach(function(currentAnnotations) { if (currentAnnotations.options._wrapperID === wrapperID) { currentAnnotations.setVisibility(visible); return; } }); })(\"%s\", %s);", map.get("id"), args[0]));
            }});
            put("Axis", new HashMap<String, String>(){{
                put("addPlotBand", String.format("(function addPlotBand(axis, wrapperID, options) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.addPlotBand(options); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.addPlotBand(options); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.addPlotBand(options); return; } }); break; default: return; } })(\"%s\", \"%s\", %s);", map.get("axis"), map.get("id"), args[0]));
                put("addPlotLine", String.format("(function addPlotLine(axis, wrapperID, options) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.addPlotLine(options); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.addPlotLine(options); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.addPlotLine(options); return; } }); break; default: return; } })(\"%s\", \"%s\", %s);", map.get("axis"), map.get("id"), args[0]));
                put("addTitle", String.format("(function addTitle(axis, wrapperID, display) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.addTitle(display); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.addTitle(display); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.addTitle(display); return; } }); break; default: return; } })(\"%s\", \"%s\", %s);", map.get("axis"), map.get("id"), args[0]));
                put("drawCrosshair", String.format("(function drawCrosshair(axis, wrapperID) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.drawCrosshair(); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.drawCrosshair(); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.drawCrosshair(); return; } }); break; default: return; } })(\"%s\", \"%s\");", map.get("axis"), map.get("id")));
                put("hideCrosshair", String.format("(function hideCrosshair(axis, wrapperID) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.hideCrosshair(); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.hideCrosshair(); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.hideCrosshair(); return; } }); break; default: return; } })(\"%s\", \"%s\");", map.get("axis"), map.get("id")));
                put("remove0", String.format("(function remove(axis, wrapperID) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.remove(); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.remove(); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.remove(); return; } }); break; default: return; } })(\"%s\", \"%s\");", map.get("axis"), map.get("id")));
                put("remove1", String.format("(function remove(axis, wrapperID, redraw) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.remove(redraw); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.remove(redraw); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.remove(redraw); return; } }); break; default: return; } })(\"%s\", \"%s\", %s);", map.get("axis"), map.get("id"), args[0]));
                put("removePlotBand", String.format("(function removePlotBand(axis, wrapperID, id) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.removePlotBand(id); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.removePlotBand(id); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.removePlotBand(id); return; } }); break; default: return; } })(\"%s\", \"%s\", \"%s\");", map.get("axis"), map.get("id"), args[0]));
                put("removePlotLine", String.format("(function removePlotLine(axis, wrapperID, id) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.removePlotLine(id); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.removePlotLine(id); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.removePlotLine(id); return; } }); break; default: return; } })(\"%s\", \"%s\", \"%s\");", map.get("axis"), map.get("id"), args[0]));
                put("renderLine", String.format("(function renderLine(axis, wrapperID) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.renderLine(); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.renderLine(); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.renderLine(); return; } }); break; default: return; } })(\"%s\", \"%s\");", map.get("axis"), map.get("id")));
                put("renderMinorTick", String.format("(function renderMinorTick(axis, wrapperID, pos) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.renderMinorTick(pos); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.renderMinorTick(pos); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.renderMinorTick(pos); return; } }); break; default: return; } })(\"%s\", \"%s\", %s);", map.get("axis"), map.get("id"), args[0]));
                put("renderTick", String.format("(function renderTick(axis, wrapperID, pos, i) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.renderTick(pos, i); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.renderTick(pos, i); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.renderTick(pos, i); return; } }); break; default: return; } })(\"%s\", \"%s\", %s, %s);", map.get("axis"), map.get("id"), args[0], args[1]));
                put("setCategories0", String.format("(function setCategories(axis, wrapperID, categories) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setCategories(categories); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setCategories(categories); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setCategories(categories); return; } }); break; default: return; } })(\"%s\", \"%s\", %s);", map.get("axis"), map.get("id"), args[0]));
                put("setCategories1", String.format("(function setCategories(axis, wrapperID, categories, redraw) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setCategories(categories, redraw); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setCategories(categories, redraw); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setCategories(categories, redraw); return; } }); break; default: return; } })(\"%s\", \"%s\", %s, %s);", map.get("axis"), map.get("id"), args[0], args[1]));
                put("setExtremes0", String.format("(function setExtremes(axis, wrapperID) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(); return; } }); break; default: return; } })(\"%s\", \"%s\");", map.get("axis"), map.get("id")));
                put("setExtremes1", String.format("(function setExtremes(axis, wrapperID, newMin) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(newMin); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(newMin); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(newMin); return; } }); break; default: return; } })(\"%s\", \"%s\", %s);", map.get("axis"), map.get("id"), args[0]));
                put("setExtremes2", String.format("(function setExtremes(axis, wrapperID, newMin, newMax) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(newMin, newMax); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(newMin, newMax); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(newMin, newMax); return; } }); break; default: return; } })(\"%s\", \"%s\", %s, %s);", map.get("axis"), map.get("id"), args[0], args[1]));
                put("setExtremes3", String.format("(function setExtremes(axis, wrapperID, newMin, newMax, redraw) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(newMin, newMax, redraw); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(newMin, newMax, redraw); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(newMin, newMax, redraw); return; } }); break; default: return; } })(\"%s\", \"%s\", %s, %s, %s);", map.get("axis"), map.get("id"), args[0], args[1], args[2]));
                put("setExtremes4", String.format("(function setExtremes(axis, wrapperID, newMin, newMax, redraw, animation) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(newMin, newMax, redraw, animation); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(newMin, newMax, redraw, animation); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(newMin, newMax, redraw, animation); return; } }); break; default: return; } })(\"%s\", \"%s\", %s, %s, %s, %s);", map.get("axis"), map.get("id"), args[0], args[1], args[2], args[3]));
                put("setTickPositions", String.format("(function setTickPositions(axis, wrapperID) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setTickPositions(); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setTickPositions(); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setTickPositions(); return; } }); break; default: return; } })(\"%s\", \"%s\");", map.get("axis"), map.get("id")));
                put("setTitle0", String.format("(function setTitle(axis, wrapperID, title) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setTitle(title); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setTitle(title); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setTitle(title); return; } }); break; default: return; } })(\"%s\", \"%s\", %s);", map.get("axis"), map.get("id"), args[0]));
                put("setTitle1", String.format("(function setTitle(axis, wrapperID, title, redraw) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setTitle(title, redraw); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setTitle(title, redraw); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setTitle(title, redraw); return; } }); break; default: return; } })(\"%s\", \"%s\", %s, %s);", map.get("axis"), map.get("id"), args[0], args[1]));
                put("update0", String.format("(function update(axis, wrapperID, options) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.update(options); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.update(options); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.update(options); return; } }); break; default: return; } })(\"%s\", \"%s\", %s);", map.get("axis"), map.get("id"), args[0]));
                put("update1", String.format("(function update(axis, wrapperID, options, redraw) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.update(options, redraw); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.update(options, redraw); return; } }); break; case \"z\": chart.zAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.update(options, redraw); return; } }); break; default: return; } })(\"%s\", \"%s\", %s, %s);", map.get("axis"), map.get("id"), args[0], args[1]));
            }});
            put("Chart", new HashMap<String, String>(){{
                put("addAnnotation0", String.format("(function addAnnotation(options) { chart.addAnnotation(options); })(%s);", args[0]));
                put("addAnnotation1", String.format("(function addAnnotation(options, redraw) { chart.addAnnotation(options, redraw); })(%s, %s);", args[0], args[1]));
                put("addAxis0", String.format("(function addAxis(options, isX) { chart.addAxis(options, isX); })(%s, %s);", args[0], args[1]));
                put("addAxis1", String.format("(function addAxis(options, isX, redraw) { chart.addAxis(options, isX, redraw); })(%s, %s, %s);", args[0], args[1], args[2]));
                put("addAxis2", String.format("(function addAxis(options, isX, redraw, animation) { chart.addAxis(options, isX, redraw, animation); })(%s, %s, %s, %s);", args[0], args[1], args[2], args[3]));
                put("addCredits", String.format("(function addCredits(options) { chart.addCredits(options); })(%s);", args[0]));
                put("addSeries0", String.format("(function addSeries(options) { chart.addSeries(options); })(%s);", args[0]));
                put("addSeries1", String.format("(function addSeries(options, redraw) { chart.addSeries(options, redraw); })(%s, %s);", args[0], args[1]));
                put("addSeries2", String.format("(function addSeries(options, redraw, animation) { chart.addSeries(options, redraw, animation); })(%s, %s, %s);", args[0], args[1], args[2]));
                put("addSeriesAsDrilldown", String.format("(function addSeriesAsDrilldown(point, options) { chart.addSeriesAsDrilldown(point, options); })(%s, %s);", args[0], args[1]));
                put("cancelSonify0", "(function cancelSonify() { chart.cancelSonify(); })();");
                put("cancelSonify1", String.format("(function cancelSonify(fadeOut) { chart.cancelSonify(fadeOut); })(%s);", args[0]));
                put("destroy", "(function destroy() { chart.destroy(); })();");
                put("drillUp", "(function drillUp() { chart.drillUp(); })();");
                put("hideLoading", "(function hideLoading() { chart.hideLoading(); })();");
                put("openInCloud", "(function openInCloud() { chart.openInCloud(); })();");
                put("pauseSonify0", "(function pauseSonify() { chart.pauseSonify(); })();");
                put("pauseSonify1", String.format("(function pauseSonify(fadeOut) { chart.pauseSonify(fadeOut); })(%s);", args[0]));
                put("print", "(function print() { chart.print(); })();");
                put("redraw0", "(function redraw() { chart.redraw(); })();");
                put("redraw1", String.format("(function redraw(animation) { chart.redraw(animation); })(%s);", args[0]));
                put("removeAnnotation", String.format("(function removeAnnotation(id) { chart.removeAnnotation(id); })(\"%s\");", args[0]));
                put("resetSonifyCursor", "(function resetSonifyCursor() { chart.resetSonifyCursor(); })();");
                put("resetSonifyCursorEnd", "(function resetSonifyCursorEnd() { chart.resetSonifyCursorEnd(); })();");
                put("setSonifyCursor", String.format("(function setSonifyCursor(points) { chart.setSonifyCursor(points); })(%s);", args[0]));
                put("setSubtitle", String.format("(function setSubtitle(options) { chart.setSubtitle(options); })(%s);", args[0]));
                put("setTitle", String.format("(function setTitle(titleOptions, subtitleOptions, redraw) { chart.setTitle(titleOptions, subtitleOptions, redraw); })(%s, %s, %s);", args[0], args[1], args[2]));
                put("showLoading", String.format("(function showLoading(str) { chart.showLoading(str); })(\"%s\");", args[0]));
                put("sonify", String.format("(function sonify(options) { chart.sonify(options); })(\"%s\");", args[0]));
                put("update0", String.format("(function update(options) { chart.update(options); })(%s);", args[0]));
                put("update1", String.format("(function update(options, redraw) { chart.update(options, redraw); })(%s, %s);", args[0], args[1]));
                put("update2", String.format("(function update(options, redraw, oneToOne) { chart.update(options, redraw, oneToOne); })(%s, %s, %s);", args[0], args[1], args[2]));
                put("update3", String.format("(function update(options, redraw, oneToOne, animation) { chart.update(options, redraw, oneToOne, animation); })(%s, %s, %s, %s);", args[0], args[1], args[2], args[3]));
                put("viewData", "(function viewData() { chart.viewData(); })();");
                put("zoomOut", "(function zoomOut() { chart.zoomOut(); })();");
            }});
            put("Legend", new HashMap<String, String>(){{
                put("setText", String.format(" (function setText(wrapperID, item) { if (chart.legend.options._wrapperID === wrapperID) { chart.legend.setText(item); return; } })(\"%s\", %s);", map.get("id"), args[0]));
                put("update0", String.format(" (function update(wrapperID, options) { if (chart.legend.options._wrapperID === wrapperID) { chart.legend.update(options); return; } })(\"%s\", %s);", map.get("id"), args[0]));
                put("update1", String.format(" (function update(wrapperID, options, redraw) { if (chart.legend.options._wrapperID === wrapperID) { chart.legend.update(options, redraw); return; } })(\"%s\", %s, %s);", map.get("id"), args[0], args[1]));
            }});
            put("PlotLineOrBand", new HashMap<String, String>(){{
                put("destroy", String.format("(function destroy(wrapperID) { chart.xAxis.forEach(function(currentAxis) { currentAxis.plotLinesAndBands.forEach(function(currentLineAndBand) { if (currentLineAndBand.options._wrapperID === wrapperID ) { currentLineAndBand.destroy(); return; } }); }); chart.yAxis.forEach(function(currentAxis) { currentAxis.plotLinesAndBands.forEach(function(currentLineAndBand) { if (currentLineAndBand.options._wrapperID === wrapperID ) { currentLineAndBand.destroy(); return; } }); }); })(\"%s\");", map.get("id")));
            }});
            put("Point", new HashMap<String, String>(){{
                put("cancelSonify0", String.format("(function cancelSonify(wrapperID) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.cancelSonify(); return; } }); }); })(\"%s\");", map.get("id")));
                put("cancelSonify1", String.format("(function cancelSonify(wrapperID, fadeOut) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.cancelSonify(fadeOut); return; } }); }); })(\"%s\", %s);", map.get("id"), args[0]));
                put("onMouseOut", String.format("(function onMouseOut(wrapperID) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.onMouseOut(); return; } }); }); })(\"%s\");", map.get("id")));
                put("remove0", String.format("(function remove(wrapperID, redraw) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.remove(redraw); return; } }); }); })(\"%s\", %s);", map.get("id"), args[0]));
                put("remove1", String.format("(function remove(wrapperID, redraw, animation) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.remove(redraw, animation); return; } }); }); })(\"%s\", %s, %s);", map.get("id"), args[0], args[1]));
                put("select0", String.format("(function select(wrapperID) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.select(); return; } }); }); })(\"%s\");", map.get("id")));
                put("select1", String.format("(function select(wrapperID, selected) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.select(selected); return; } }); }); })(\"%s\", %s);", map.get("id"), args[0]));
                put("select2", String.format("(function select(wrapperID, selected, accumulate) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.select(selected, accumulate); return; } }); }); })(\"%s\", %s, %s);", map.get("id"), args[0], args[1]));
                put("setNestedProperty", String.format("(function setNestedProperty(wrapperID, object, value, key) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.setNestedProperty(object, value, key); return; } }); }); })(\"%s\", %s, %s, \"%s\");", map.get("id"), args[0], args[1], args[2]));
                put("setState0", String.format("(function setState(wrapperID) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.setState(); return; } }); }); })(\"%s\");", map.get("id")));
                put("setState1", String.format("(function setState(wrapperID, state) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.setState(state); return; } }); }); })(\"%s\", \"%s\");", map.get("id"), args[0]));
                put("setState2", String.format("(function setState(wrapperID, state, move) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.setState(state, move); return; } }); }); })(\"%s\", \"%s\", %s);", map.get("id"), args[0], args[1]));
                put("sonify", String.format("(function sonify(wrapperID, options) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.sonify(options); return; } }); }); })(\"%s\", %s);", map.get("id"), args[0]));
                put("tooltipFormatter", String.format("(function tooltipFormatter(wrapperID, pointFormat) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.tooltipFormatter(pointFormat); return; } }); }); })(\"%s\", \"%s\");", map.get("id"), args[0]));
                put("update0", String.format("(function update(wrapperID, options) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.update(options); return; } }); }); })(\"%s\", %s);", map.get("id"), args[0]));
                put("update1", String.format("(function update(wrapperID, options, redraw) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.update(options, redraw); return; } }); }); })(\"%s\", %s, %s);", map.get("id"), args[0], args[1]));
                put("update2", String.format("(function update(wrapperID, options, redraw, animation) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.update(options, redraw, animation); return; } }); }); })(\"%s\", %s, %s, %s);", map.get("id"), args[0], args[1], args[2]));
            }});
            put("Series", new HashMap<String, String>(){{
                put("addPoint0", String.format("(function addPoint(wrapperID, options) { chart.series.forEach(function(serie) { if(serie.options._wrapperID === wrapperID) { serie.addPoint(options); return; } }); })(\"%s\", %s);", map.get("id"), args[0]));
                put("addPoint1", String.format("(function addPoint(wrapperID, options, redraw) { chart.series.forEach(function(serie) { if(serie.options._wrapperID === wrapperID) { serie.addPoint(options, redraw); return; } }); })(\"%s\", %s, %s);", map.get("id"), args[0], args[1]));
                put("addPoint2", String.format("(function addPoint(wrapperID, options, redraw, shift) { chart.series.forEach(function(serie) { if(serie.options._wrapperID === wrapperID) { serie.addPoint(options, redraw, shift); return; } }); })(\"%s\", %s, %s, %s);", map.get("id"), args[0], args[1], args[2]));
                put("addPoint3", String.format("(function addPoint(wrapperID, options, redraw, shift, animation) { chart.series.forEach(function(serie) { if(serie.options._wrapperID === wrapperID) { serie.addPoint(options, redraw, shift, animation); return; } }); })(\"%s\", %s, %s, %s, %s);", map.get("id"), args[0], args[1], args[2], args[3]));
                put("animate", String.format("(function animate(wrapperID, init) { chart.series.forEach(function(serie) { if(serie.options._wrapperID === wrapperID) { serie.animate(init); return; } }); })(\"%s\", %s);", map.get("id"), args[0]));
                put("drawGraph", String.format("(function drawGraph(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.drawGraph(); return; } }); })(\"%s\");", map.get("id")));
                put("drawPoints", String.format("(function drawPoints(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.drawPoints(); return; } }); })(\"%s\");", map.get("id")));
                put("hide", String.format("(function hide(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.hide(); return; } }); })(\"%s\");", map.get("id")));
                put("onMouseOut", String.format("(function onMouseOut(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.onMouseOut(); return; } }); })(\"%s\");", map.get("id")));
                put("onMouseOver", String.format("(function onMouseOver(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.onMouseOver(); return; } }); })(\"%s\");", map.get("id")));
                put("remove0", String.format("(function remove(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.remove(); return; } }); })(\"%s\");", map.get("id")));
                put("remove1", String.format("(function remove(wrapperID, redraw) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.remove(redraw); return; } }); })(\"%s\", %s);", map.get("id"), args[0]));
                put("remove2", String.format("(function remove(wrapperID, redraw, animation) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.remove(redraw, animation); return; } }); })(\"%s\", %s, %s);", map.get("id"), args[0], args[1]));
                put("remove3", String.format("(function remove(wrapperID, redraw, animation, withEvent) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.remove(redraw, animation, withEvent); return; } }); })(\"%s\", %s, %s, %s);", map.get("id"), args[0], args[1], args[2]));
                put("removePoint0", String.format("(function removePoint(wrapperID, i) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.removePoint(i); return; } }); })(\"%s\", %s);", map.get("id"), args[0]));
                put("removePoint1", String.format("(function removePoint(wrapperID, i, redraw) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.removePoint(i, redraw); return; } }); })(\"%s\", %s, %s);", map.get("id"), args[0], args[1]));
                put("removePoint2", String.format("(function removePoint(wrapperID, i, redraw, animation) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.removePoint(i, redraw, animation); return; } }); })(\"%s\", %s, %s, %s);", map.get("id"), args[0], args[1], args[2]));
                put("render", String.format("(function render(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.render(); return; } }); })(\"%s\");", map.get("id")));
                put("select0", String.format("(function select(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.select(); return; } }); })(\"%s\");", map.get("id")));
                put("select1", String.format("(function select(wrapperID, selected) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.select(selected); return; } }); })(\"%s\", %s);", map.get("id"), args[0]));
                put("setData0", String.format("(function setData(wrapperID, data) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.setData(data); return; } }); })(\"%s\", %s);", map.get("id"), args[0]));
                put("setData1", String.format("(function setData(wrapperID, data, redraw) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.setData(data, redraw); return; } }); })(\"%s\", %s, %s);", map.get("id"), args[0], args[1]));
                put("setData2", String.format("(function setData(wrapperID, data, redraw, animation) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.setData(data, redraw, animation); return; } }); })(\"%s\", %s, %s, %s);", map.get("id"), args[0], args[1], args[2]));
                put("setData3", String.format("(function setData(wrapperID, data, redraw, animation, updatePoints) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.setData(data, redraw, animation, updatePoints); return; } }); })(\"%s\", %s, %s, %s, %s);", map.get("id"), args[0], args[1], args[2], args[3]));
                put("setOptions", String.format("(function setOptions(wrapperID, itemOptions) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.setOptions(itemOptions); return; } }); })(\"%s\", %s);", map.get("id"), args[0]));
                put("setState0", String.format("(function setState(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.setState(); return; } }); })(\"%s\");", map.get("id")));
                put("setState1", String.format("(function setState(wrapperID, state) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.setState(state); return; } }); })(\"%s\", \"%s\");", map.get("id"), args[0]));
                put("setVisible0", String.format("(function setVisible(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.setVisible(); return; } }); })(\"%s\");", map.get("id")));
                put("setVisible1", String.format("(function setVisible(wrapperID, visible) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.setVisible(visible); return; } }); })(\"%s\", %s);", map.get("id"), args[0]));
                put("setVisible2", String.format("(function setVisible(wrapperID, visible, redraw) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.setVisible(visible, redraw); return; } }); })(\"%s\", %s, %s);", map.get("id"), args[0], args[1]));
                put("show", String.format("(function show(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.show(); return; } }); })(\"%s\");", map.get("id")));
                put("sonify", String.format("(function sonify(wrapperID, options) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.sonify(options); return; } }); })(\"%s\", %s);", map.get("id"), args[0]));
                put("translate", String.format("(function translate(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.translate(); return; } }); })(\"%s\");", map.get("id")));
                put("update0", String.format("(function update(wrapperID, options) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.update(options); return; } }); })(\"%s\", %s);", map.get("id"), args[0]));
                put("update1", String.format("(function update(wrapperID, options, redraw) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.update(options, redraw); return; } }); })(\"%s\", %s, %s);", map.get("id"), args[0], args[1]));
                put("getName", String.format("(function getName(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { return serie.getName(); } }); })(\"%s\");", map.get("id")));
            }});
            put("Tooltip", new HashMap<String, String>(){{
                put("defaultFormatter", String.format("(function defaultFormatter(wrapperID, tooltip) { if (chart.tooltip.options._wrapperID === wrapperID) { chart.tooltip.defaultFormatter(tooltip); return; } })(\"%s\", %s);", map.get("id"), args[0]));
                put("destroy", String.format("(function destroy(wrapperID) { if (chart.tooltip.options._wrapperID === wrapperID) { chart.tooltip.destroy(); return; } })(\"%s\");", map.get("id")));
                put("getLabel", String.format("(function getLabel(wrapperID) { if (chart.tooltip.options._wrapperID === wrapperID) { chart.tooltip.getLabel(); return; } })(\"%s\");", map.get("id")));
                put("hide0", String.format("(function hide(wrapperID) { if (chart.tooltip.options._wrapperID === wrapperID) { chart.tooltip.hide(); return; } })(\"%s\");", map.get("id")));
                put("hide1", String.format("(function hide(wrapperID, delay) { if (chart.tooltip.options._wrapperID === wrapperID) { chart.tooltip.hide(delay); return; } })(\"%s\", %s);", map.get("id"), args[0]));
                put("refresh0", String.format("(function refresh(tooltipID, pointID) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === pointID) { if (chart.tooltip.options._wrapperID === tooltipID) { chart.tooltip.refresh(point); return; } } }); }); })(\"%s\", \"%s\");", map.get("id"), map.get("pointID")));
                put("refresh1", String.format("(function refresh(tooltipID, pointIDs) { if (chart.tooltip.options._wrapperID !== tooltipID) { return; } var points = []; chart.series.forEach(function(serie) { var points = serie.data.forEach(function(point) { if (pointIDs.indexOf(point.options._wrapperID) > -1) { points.push(point); } }); }); if (points.length) { chart.tooltip.refresh(points); } })(\"%s\", %s);", map.get("id"), map.get("pointIDs")));
                put("update", String.format("(function update(wrapperID, options) { if (chart.tooltip.options._wrapperID === wrapperID) { chart.tooltip.update(options); return; } })(\"%s\", %s);", map.get("id"), args[0]));
            }});
        }};

        return (functions.get(map.get("class"))).get(map.get("method"));
    }

}
